Unnamed: 0,;,[,(,int,",",{,if,endif,for,return,=,<,+,*
S,,,,S ::= Program $,,,,,,,,,,
Program,,,,Program ::= Declaration-list,,,,,,,,,,
Declaration-list,,,,Declaration-list ::= Declaration Declaration-list | EPSILON,,,,,,,,,,
Declaration,,,,Declaration ::= Declaration-initial Declaration-prime,,,,,,,,,,
Declaration-initial,,,,Declaration-initial ::= Type-specifier ID,,,,,,,,,,
Declaration-prime,,,Declaration-prime ::= Fun-declaration-prime | Var-declaration-prime,,,,,,,,,,,
Var-declaration-prime,Var-declaration-prime ::= ; | [ NUM ];,,,,,,,,,,,,,
Fun-declaration-prime,,,Fun-declaration-prime ::= ( Params ) Compound-stmt,,,,,,,,,,,
Type-specifier,,,,Type-specifier ::= int | void,,,,,,,,,,
Params,,,,Params ::= int ID Param-prime Param-list | void,,,,,,,,,,
Param-list,,,,,"Param-list ::= , Param Param-list | EPSILON",,,,,,,,,
Param,,,,Param ::= Declaration-initial Param-prime,,,,,,,,,,
Param-prime,,Param-prime ::= [ ] | EPSILON,,,,,,,,,,,,
Compound-stmt,,,,,,Compound-stmt ::= { Declaration-list Statement-list },,,,,,,,
Statement-list,,,,,,,,,,,,,Statement-list ::= Statement Statement-list | EPSILON,
Statement,,,,,,,,,,,,,Statement ::= Expression-stmt | Compound-stmt | Selection-stmt | Iteration-stmt | Return-stmt,
Expression-stmt,,,,,,,,,,,,,Expression-stmt ::= Expression ; | break ; | ;,
Selection-stmt,,,,,,,Selection-stmt ::= if ( Expression ) Statement Else-stmt,,,,,,,
Else-stmt,,,,,,,,Else-stmt ::= endif | else Statement endif,,,,,,
Iteration-stmt,,,,,,,,,Iteration-stmt ::= for (Expression; Expression; Expression) Statement,,,,,
Return-stmt,,,,,,,,,,Return-stmt ::= return Return-stmt-prime,,,,
Return-stmt-prime,Return-stmt-prime ::= ; | Expression ;,,,,,,,,,,,,,
Expression,,,,,,,,,,,,,Expression ::= Simple-expression-zegond | ID B,
B,,,,,,,,,,,B ::= = Expression | Simple-expression-prime,,,
H,,,,,,,,,,,H ::= = Expression | G D C,,,
Simple-expression-zegond,,,,,,,,,,,,,Simple-expression-zegond ::= Additive-expression-zegond C,
Simple-expression-prime,,,,,,,,,,,,,Simple-expression-prime ::= Additive-expression-prime C,
C,,,,,,,,,,,,C ::= Relop Additive-expression | EPSILON,,
Relop,,,,,,,,,,,,Relop ::= < | ==,,
Additive-expression,,,,,,,,,,,,,Additive-expression ::= Term D,
Additive-expression-prime,,,,,,,,,,,,,Additive-expression-prime ::= Term-prime D,
Additive-expression-zegond,,,,,,,,,,,,,Additive-expression-zegond ::= Term-zegond D,
D,,,,,,,,,,,,,D ::= Addop Term | D | EPSILON,
Addop,,,,,,,,,,,,,Addop ::= + | -,
Term,,,,,,,,,,,,,Term ::= Signed-factor G,
Term-prime,,,,,,,,,,,,,Term-prime ::= Signed-factor-prime G,
Term-zegond,,,,,,,,,,,,,Term-zegond ::= Signed-factor-zegond G,
G,,,,,,,,,,,,,,G ::= * Signed-factor G | EPSILON
Signed-factor,,,,,,,,,,,,,Signed-factor ::= + Factor | - Factor | Factor,
Signed-factor-prime,,,,,,,,,,,,,Signed-factor-prime ::= + Factor-prime | - Factor-prime | Factor-prime,
Signed-factor-zegond,,,,,,,,,,,,,Signed-factor-zegond ::= + Factor | - Factor | Factor-zegond,
Factor,,,Factor ::= ( Expression ) | ID Var-call-prime | NUM,,,,,,,,,,,
Var-call-prime,,,Var-call-prime ::= ( Args ) | Var-prime,,,,,,,,,,,
Var-prime,,Var-prime ::= [ Expression ] | EPSILON,,,,,,,,,,,,
Factor-prime,,,Factor-prime ::= ( Args ) | EPSILON,,,,,,,,,,,
Factor-zegond,,,Factor-zegond ::= ( Expression ) | NUM,,,,,,,,,,,
Args,,,,,,,,,,,,,Args ::= Arg-list | EPSILON,
Arg-list,,,,,,,,,,,,,Arg-list ::= Expression Arg-list-prime,
Arg-list-prime,,,,,"Arg-list-prime ::= , Expression Arg-list-prime | EPSILON",,,,,,,,,
