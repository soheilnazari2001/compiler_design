import anytree
from anytree import RenderTree
from codegen import CodeGenerator
from scanner import Scanner


class Node(anytree.Node):
    def __init__(self, type=None, value=None, parent=None, children=None, **kwargs):
        if value is not None:
            type = f"({type}, {value})"
        super().__init__(type, parent=parent, children=children, **kwargs)


class UnexpectedEOFException(Exception):
    def __init__(self):
        super().__init__("Unepected EOF")


class Parser:
    def __init__(self, input_file):
        self.scanner = Scanner(input_file)
        self.code_generator = CodeGenerator([])
        self.lookahead = None
        self.errors = []
        self.root = None
        self._terminal_to_node_map = {"EOF": "$"}
        self.next_token()

    def get_node_name_from_token(self, token):
        if token.terminal in self._terminal_to_node_map:
            return self._terminal_to_node_map[token.terminal]

        return f"({token.token_type}, {token.token_value})"

    def print_tree(self, output_file_path):
        tree = "\n".join(f"{pre}{node.name}" for pre, _, node in RenderTree(self.root))
        with open(output_file_path, "w") as output_file:
            output_file.write(tree)

    def print_errors(self, output_file_path):
        errors = "\n".join(self.errors) if self.errors else "There is no syntax error."
        with open(output_file_path, "w") as output_file:
            output_file.write(errors)

    def next_token(self):
        self.lookahead = self.scanner.get_next_token()

    def match(self, expected, parent=None):
        if self.lookahead.terminal == expected:
            node_name = self.get_node_name_from_token(self.lookahead)
            child = Node(node_name, parent=parent)
            self.next_token()
            return child

        if self.lookahead.terminal == "EOF":
            self.raise_eof_error()
            return

        self.raise_missing_error(expected, parent=parent)

    def raise_error(self, message):
        self.errors.append(f"#{self.scanner.reader.line_number} : syntax error, {message}")

    def raise_illegal_error(self, expected, actual, parent=None):
        self.raise_error(f"illegal {actual}")
        if actual != "EOF":
            self.next_token()

    def raise_missing_error(self, missing, parent=None):
        self.raise_error(f"missing {missing}")

    def raise_eof_error(self):
        self.scanner.reader.line_number += 1
        self.raise_error("Unexpected EOF")
        raise UnexpectedEOFException()

    def parse(self):
        try:
            self.parse_{{ start }}(None)
        except UnexpectedEOFException:
            pass

    def epsilon(self, parent):
        node = Node("epsilon", parent=parent)
        return node
    {% for name, nonterminal in nonterminals.items() %}

    def parse_{{ name }}(self, parent):
        while True:
            terminal = self.lookahead.terminal
            print("inside {{name}} and seeing", terminal)
            {% for condition, statements in nonterminal.derivations.items() %}
            if terminal in {{ condition | to_set }}:
                {% if name == start %}
                self.root = node = Node("{{ nonterminal.node_name }}", parent=parent)
                {% else %}
                node = Node("{{ nonterminal.node_name }}", parent=parent)
                {% endif %}
                {% for statement in statements %}
                {% if statement.type == StatementType.TERMINAL %}
                self.match("{{ statement.value }}", parent=node)
                {% elif statement.type == StatementType.NONTERMINAL %}
                self.parse_{{ statement.value }}(node)
                {% elif statement.type == StatementType.CODEGEN %}
                self.code_generator.action_{{ statement.value[1:] }}()
                {% endif %}
                {% endfor %}
                {% if name == start %}
                Node("$", parent=node)
                {% endif %}
                return node
            {% endfor %}
            {% if nonterminal.goes_to_epsilon %}
            if terminal in {{ nonterminal.follows | to_set }}:
                node = Node("{{ nonterminal.node_name }}", parent=parent)
                self.epsilon(node)
                return node
            {% else %}
            if terminal in {{ nonterminal.follows | to_set }}:
                self.raise_missing_error("{{ nonterminal.node_name }}", parent=parent)
                return None
            {% endif %}
            if terminal == "EOF":
                self.raise_eof_error()
                return None
            self.raise_illegal_error("{{ nonterminal.node_name }}", terminal, parent=parent)
    {% endfor %}
